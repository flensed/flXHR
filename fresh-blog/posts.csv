ID	Title	Categories	Tags	Permalink	Attachment Link	Content	Custom Fields
4	'flensed' announces two revolutionary projects, CheckPlayer and flXHR.	CheckPlayer,flXHR,flensed,	press,release,	http://www.flensed.com/fresh/2008/06/press-release/	Missing Attachment	<p><strong>CheckPlayer (a tool for easy Flash Player plugin detection, upgrades, and SWF embedding), and flXHR (pronounced flex-er, a tool for direct, client-side, cross-domain fl-AJAX communication) are two new foundation projects from the 'flensed' family.</strong></p><p>Austin, Texas  June 18, 2008 -- The <strong>flensed</strong> family announces <a href="http://checkplayer.flensed.com/">CheckPlayer</a> and <a href="http://flxhr.flensed.com/">flXHR</a> (pronounced flex-er), two revolutionary projects that redefine how websites can leverage and interact with SWF assets. CheckPlayer provides a powerful yet dead-simple interface for web authors to check the Flash Player plugin version, initiate inline auto-updating, and embed SWF assets at any time. flXHR is a drop-in replacement for the browser's native XMLHttpRequest (XHR) object, but with powerful new features like direct cross-domain communication support.</p><p><strong>flensed</strong> (<a href="http://www.flensed.com/">http://www.flensed.com</a>) is a free, open-source (MIT licensed) family of projects for harnessing the largely untapped power of Javascript+SWF(+HTML/CSS).  These projects are a re-thinking of how SWF's are used on web pages, bringing the power and usefulness back to Flash-on-the-web. Because Flash is so common now (<a href="http://www.adobe.com/products/player_census/flashplayer/" target="_blank">Adobe claims almost 99%</a>), <strong>flensed</strong> is positioned as <strong><em>the best</em></strong> way to solve many of the most challenging cross-browser problems in a totally consistent, predictable medium.</p><p><span style="font-size:130%">CheckPlayer</span> is a repackaging and extension of the well-known <a href="http://code.google.com/p/swfobject/" target="_blank">SWFObject (v2.1)</a> library, which means the web author gets both libraries -- the best of both worlds. It provides some revolutionary new features, and makes adding SWF's to a page almost effortless, compared to the old days of hand-coding &lt;embed&gt; and &lt;object&gt; tags. In addition, CheckPlayer provides an incredibly easy-to-use interface for checking the version of a browser's Flash Player plugin, and prompting the user to update it if the page requires a newer version.</p><p>Combined with the powerful functionality of SWFObject, CheckPlayer is a complete solution for embedding and interacting with SWF's on a web page. Any page already written to utilize SWFObject 2.0+ will integrate easily with CheckPlayer.</p><p><span style="font-size:130%">flXHR</span> is a powerful new approach to the frustrating cross-domain security restriction problem (Javascript is blocked from communicating with a server at a different domain than the page). Mash-ups, third-party application integration, and code re-use are just some of the many reasons why this type of behavior is so important to today's Web 2.0 pages. But until now, Javascript-only (or worse, server-proxy-based) solutions have had to jump through many ugly, insecure, inefficient hoops to make this happen.</p><p>flXHR changes all that. flXHR implements a compatible API to the native XMLHttpRequest (XHR) browser object, while adding a few helpful nuggets to the mix. Most importantly, flXHR uses an invisible SWF instance which makes use of Flash Player's robust cross-domain security model, to directly punch through this domain barrier, instead of working around the barrier in sub-optimal ways like the current solutions do. The result: flXHR is literally a drop-in replacement for XHR, with more <strong><em>power</em></strong>, <strong><em>security</em></strong>, <strong><em>consistency</em></strong>, and <strong><em>ease-of-use</em></strong> than  XHR itself ever had. Because the API is fully compatible with XHR, flXHR can easily be adapted to work with many of the most popular Javascript frameworks, including Dojo, Prototype, and YUI to name a few.</p><p>CheckPlayer and flXHR were jointly developed for open-source release and for a commercial application for software company <a href="http://www.pointserve.com/" target="_blank">Pointserve, Inc.</a>, located in Austin, TX. Pointserve is using the <strong>flensed</strong> projects to strengthen how their application interacts with partner applications and with the end-user. "flXHR has really improved the way I write cross-domain scripting code. It removes all the headaches from ugly workarounds -- it's so powerful and easy to use." (Brian Ruhl, Lead UI Developer, Pointserve, Inc.) </p><p>CheckPlayer and flXHR are battle-tested and ready, but now promise to get even better as the open-source web community gets ahold of them. <strong>flensed</strong> is blazing a new path for how SWF's can be used not just to bring bells and whistles to a page, but to truly integrate with and strengthen its architecture and its scope.</p><p>About <strong>flensed</strong>:<br /><strong>flensed</strong> is an open-source offering from Getify Solutions, Inc., a web development company based in Austin, TX. Kyle Simpson is the primary author and developer.</p>	
5	flensed gets some press!	flXHR,flensed,		http://www.flensed.com/fresh/2008/06/flensed-gets-some-press/	Missing Attachment	<p><a href="http://www.flashgamer.com/" target="_blank">Jens Brynildsen</a> writes for a fabulous site called <a href="http://www.flashmagazine.com/" target="_blank">FlashMagazine.com</a>.  He was kind enough to do <a href="http://www.flashmagazine.com/News/detail/flxhr_and_flensed_tools/" target="_blank">this great article</a> about flensed and specifically about the flXHR project. Please check out his site, because there's tons of great information there.</p><p><a href="http://www.flashmagazine.com/news/detail/flash_disambiguation/" target="_blank">Another great article</a>  on FlashMagazine.com was written by <a href="http://www.scottydawg.com/" target="_blank">Scott Delamater</a>. I found it really direct and informative, and it helps to clear up some of the confusion and common misconceptions about Flash platform technology. I encourage everyone to read this article, and to link to it and spread it around, as it will only help all of us Flash afficianados to convince the non-Flash community of its wonderful benefits!</p>	
6	Ajaxian.com highlights flXHR	flXHR,	Ajax flXHR XHR,	http://www.flensed.com/fresh/2008/06/ajaxiancom-highlights-flxhr/	Missing Attachment	<a href="http://www.ajaxian.com/" target="_blank">Ajaxian.com</a> is an incredibly well read site with tons of amazing articles about anything Javascript and AJAX related. I've read the site for a long time now.  <a href="http://ajaxian.com/about-us/#DionAlmaer" target="_blank">Dion Almaer</a> just put up a great brief <a href="http://ajaxian.com/archives/flxhr-flash-based-xhr-from-flensed" target="_blank">article highlighting the flXHR project</a>! Go check it out, and while you're there, check out all the other great content that Ajaxian.com has to offer.	
7	new flXHR demos posted	flXHR,	xhr jquery dwr flxhr,	http://www.flensed.com/fresh/2008/06/new-flxhr-demos-posted/	Missing Attachment	I've put up two new demos... 1. <a href="http://flxhr.flensed.com/demo.php#demo11" target="_blank">Demo #11 (a, b, and c)</a> is a demo showing integration with jQuery... it uses a <a href="http://dev.jquery.com/attachment/ticket/3087/ajax_transport.diff" target="_blank">patched</a> version of <a href="http://flxhr.flensed.com/code/build/thirdparty/jquery-1.2.6-patched.js">jQuery 1.2.6</a> which I was able to convince the jQuery dev team to make.    Hopefully the next release of jQuery will include the patch so everyone can share in the joy that is flXHR.  It operates under the same premise as the other framework integration demos.2. <a href="http://flxhr.flensed.com/demo.php#demo12" target="_blank">Demo #12</a> is an interesting demo... it shows actually a more brute force way of adapting flXHR into a page.  It literally overwrites the native XHR object (and for IE, the ActiveXObject instantiator) and forces a flXHR instance to be returned instead.  This is useful for any scenario where there's no way to adapt a set of code to use a different XHR, but you still want to use flXHR.  For instance, the DWR framework has a similar restriction to what jQuery (without the patch) has, which is that it exposes no way to override the transport creation.	
8	CheckPlayer gets an update	CheckPlayer,	CheckPlayer,SWF,	http://www.flensed.com/fresh/2008/07/checkplayer-gets-an-update/	Missing Attachment	<p>CheckPlayer v0.6-alpha6 <del datetime="2008-07-02T23:06:30+00:00">v0.6-alpha5 </del><del datetime="2008-07-02T04:55:40+00:00">v0.6-alpha4</del> <del datetime="2008-07-02T04:55:40+00:00">v0.6-alpha3</del> has been released, which fixes all the known bugs <del datetime="2008-07-02T23:06:06+00:00">*except for <a href="http://checkplayer.flensed.com/discuss/viewtopic.php?f=9&t=24">one new one</a>, related to plugin updating in FF3*</del>, and adds a couple of minor new features.</p><ol><li>The "flensed_base_path" parameter now no longer needs to be specified, as it is auto-detected from the loading of the script itself. However, you can still use it, and may need to if it's being used in a strange environment like inside a CMS with weird path issues or whatever.</li><li>DoSWF() now supports an extension to the "targetElem" (formerlly labeled "replaceElemIdStr") parameter, which allows an author more control over how the SWF is added to the DOM.  The default "replace" behavior (as SWFObject's embedSWF() does) is maintained. However, an object can alternatively be passed for this parameter, with a named key property of either "replaceId" (same behavior) or "appendToId", which mimics more the SWFObject 1.5 behavior, which is that it will append the SWF as a child of the targetElem. Also, a value of null or false can be passed for this parameter, which simply adds the SWF to the end of the BODY (essentially the same as passing appendToId:bodyId). The goal is to give the author more flexibility in SWF authoring. <strong>Note:</strong> Existing code will work the same as before and doesn't need to be changed.</li><li>Numerous minor bug fixes (and regression bugs) were addressed in this release. This should be the most stable CheckPlayer release so far.</li></ol><p>I strongly encourage everyone to upgrade to this new release of CheckPlayer for optimum performance.</p>	
9	flXHR spreads slowly but surely!	flXHR,	flXHR,	http://www.flensed.com/fresh/2008/07/flxhr-spreads-slowly-but-surely/	Missing Attachment	<p>Found another <a href="http://lhorie.blogspot.com/2008/06/flxhr-flash-based-ajax.html" target="_blank">couple of sites</a> that <a href="http://onthetech.com/2008/06/25/flxhr-project/" target="_blank">mention short blurbs about flXHR</a>. Also, SWIK picked up on flXHR through del.icio.us association with <a href="http://swik.net/SWF+Ajax" target="_blank">AJAX, SWF, and Opensource</a>. The word is spreading, slowly but surely!</p>	
10	jQuery and flXHR… what’s next?	flXHR,	flXHR jQuery,	http://www.flensed.com/fresh/2008/07/jquery-thinks-flxhr-is-irrelevant/	Missing Attachment	<p><strong>Update:</strong> Upon further discussion with some jQuery devs, I've decided my hard stance was over-reactionary and that further discussion with them is warranted and appropriate. Please take the rest of this post and comments with a grain of salt, and my apologies for any ill-will it may have caused. For my part, I will be exploring (and assisting them in finding) ways that jQuery can be improved which satisfy all involved (including hopefully to the benefit of flXHR and our community).</p><p>I learned some saddening news just now, related to close-mindedness on the part of the jQuery devs.  I filed this ticket on behalf of our project and our community a week or two ago:</p><p><a href="http://dev.jquery.com/ticket/3087" target="_blank">http://dev.jquery.com/ticket/3087</a></p><p>The problem is that jQuery's architecture makes it difficult (but not impossible, see <a href="http://flxhr.flensed.com/demo.php#demo12">http://flxhr.flensed.com/demo.php#demo12</a>) to adapt in a replacement for XHR.  Many of the other major frameworks provide a way to do this, meaning they recognize the need to play well with others.  At first, things seemed promising.  The fix turned out to be a really simple one, like 5 simple lines of code, and this patch was provided:</p><p><a href="http://dev.jquery.com/attachment/ticket/3087/ajax_transport.diff" target="_blank">http://dev.jquery.com/attachment/ticket/3087/ajax_transport.diff</a></p><p>I then followed up by asking if that patch would make it into a jQuery release.  As you can see by the final comments on that ticket 3087, the jQuery devs have decided that flXHR and its effort to provide an XHR replacement is too narrow and is irrelevant since it's only for "one user".    I know that's not the case, because I know there are hundreds of you out there using flXHR already, and I'm sure some of you are trying to make it work in a jQuery environment.  For what it's worth, until this debacle, jQuery was my library of choice.  This changes my whole opinion.  I guess they're so busy they just can't be bothered with 5 simple lines of code patch.</p><p>As I mention above, the good news is that there's still a workaround, though not as graceful as hoped, as illustrated with demo #12.  Basically, this is the catch-all example for how *any* page or set of code can be changed to use flXHR, without the existing code even knowing it, by simply using the dynamic nature of the Javascript language and overwriting the native XHR object with flXHR.  It's actually really quite simple, but it's a little more "heavy-handed" and brute-force in nature.  But there are some libraries and code where this will be the only choice (like jQuery!), so there ya go.</p><p>Anyway, I was hoping maybe to stir up some sentiment from anyone here reading this blog to perhaps feel like they could make a counter-statement on that closed ticket, just so jQuery devs know that it's indeed not just "one user" they so casually dismissed.  You have to have a jQuery dev account to comment, but it's easy to sign up here:  <a href="http://dev.jquery.com/register" target="_blank">http://dev.jquery.com/register</a></p><p>I'm sure this won't really make a difference in their mind.  <del datetime="2008-07-03T19:44:09+00:00">But on principle alone, I think their poor social skills are something that should at least be called out and kept to task.</del> [I would like to retract this previous statement, as it's come across as mean and that was not my intent.] And maybe it'll help them re-consider in the future when other projects are hoping to coordinate with their framework.</p>	
11	flXHR and CheckPlayer… updated	CheckPlayer,flXHR,flensed,	flensed flXHR CheckPlayer,	http://www.flensed.com/fresh/2008/07/flxhr-and-checkplayer-updated/	Missing Attachment	flXHR v0.5-alpha7 and CheckPlayer v0.6-alpha6 have been tested together and fully operate in all supported OS's and browsers. There were LOTS of problems introduced (mainly into flXHR) as a result of changes made to both which I failed to keep properly sync'd and tested, since the two are co-related.If you are using either project, please make sure you have updated to these newest versions to make sure that you are not operating with non-functioning code.FYI: flXHR v0.6 is coming soon, maybe by the end of the weekend. There are several new features which will be built around this new stable, tested base of the code, and leveraging the new CheckPlayer functionality.	
12	Some good news for Flash…	Flash,	Flash,	http://www.flensed.com/fresh/2008/07/some-good-news-for-flash/	Missing Attachment	<p>3 pieces of good news today regarding Flash:</p><ol><li>Flash v9 is up to 97% usage worldwide! And 9.0.115 (update3), which is only 6 months old, is already at 82%. We still need to get 9.0.124 (update4) up in numbers, because it has some huge security fixes that are very important. Hint: <strong>Use SWFObject or CheckPlayer</strong>, which have the inline auto-update features to help get more people updated with the latest Flash.  Read this <a href="http://blog.digitalbackcountry.com/?p=1483" target="_blank">Flash Player version penetration article</a> for more details.</li><li>Flash v10 beta 2 for Linux is finally catching up in performance! This is huge news for Linux users, and for web developers across the board, as we can finally target audiences in that segment with our Flash content and not have to worry so much about a poor experience they may have. Keep up the good work Adobe. And Gnash, better step up your game! :)  Here's a <a href="http://practical-tech.com/operating-system/linux/adobe-flash-10-on-linux-looking-good/" target="_blank">full review of Flash Player 10 beta 2 for Linux</a> that is very informative.</li><li><p>To me, perhaps the most exciting of all, is that Adobe is preparing to release a set of open-source tools that allow a C/C++ developer to cross-compile their projects (using LLVM) to target actionscript byte code which will run natively in Flash!  They already have working versions of Quake and other games done this way as proof. Yes, there are security concerns we need to address, with the full superset of those languages, before deploying that code to a buggy web browser (ah-hem, IE?), but this is a great start.</p><p>Silverlight's big claim to fame is the cross-compile with common intermediate runtime language across a bunch of .NET languages, as well as many other ports to languages such as Java, PHP, even Javascript!  I can only think that the future looks bright (I gotta wear shades!) for Flash to get up to par with them (and probably surpass) as other languages follow Adobe's lead, opening up Flash to a whole 'nother world of development talent! Here's a great <a href="http://news.zdnet.co.uk/software/0,1000000121,39445545,00.htm?r=5" target="_blank">article describing the C/C++ cross-compiling effort by Adobe</a>.</ol><p>Btw, thanks to <a href="http://www.flashmagazine.com/" target="_blank">FlashMagazine.com</a> for keeping us all up to date on these great progress steps for Flash!</p>	
13	flash (and silverlight)… is a re-think possible?	Flash,	Flash,	http://www.flensed.com/fresh/2008/07/flash-and-silverlight-is-a-re-think-possible/	Missing Attachment	The heart and soul of what flensed is about is re-thinking the way flash is used and leveraged on websites. There's (understandably) a good degree of resistance with the hip crowd who thinks its still so cool to yell "down with flash" whenver they get a chance.I predict those fools will be the ones begging for a job 5 years from now, because the rest of us, who see flash as a pratical tool with powerful potential (but admittedly a colored past), will be far down the road in making real and practical innovations on the web.  I "preach" a message of inclusion, meaning that all these different technologies have their place and it takes a mature and intelligent person to think technology-agnostically about the topic and use what's right for each part of a job, and not be afraid to re-think the status quo from time to time.This <a href="http://blogs.zdnet.com/carroll/?p=1855">ZDNet article on flash/silverlight</a> is one of several I've read recently which are starting to, ever so gracefully, crack open that egg and start seeing if anyone else will bite. I couldn't be more pleased that I'm not alone in the wild on this concept. Definitely give that article a read and comment over there if you agree.	
14	AS3 buzz	Flash,	flash actionscript,	http://www.flensed.com/fresh/2008/07/as3-buzz/	Missing Attachment	<a href="http://www.oreillynet.com/pub/au/568" target="_blank">Colin Moock</a>, a legend in the Flash community, created quite a stir last week (and rightly so!) with his <a href="http://www.insideria.com/2008/07/the-charges-against-actionscri.html" target="_blank">Charges Against Actionscript 3.0 article</a> on <a href="http://www.insideria.com/" target="_blank">InsideRIA</a>. It's really a fantastic read (but it is a little bit long), and the comments are even more helpful to see how the community feels and not just the one author. Even <a href="http://blogs.adobe.com/fcheng/" target="_blank">Adobe Engineer Francis Cheng</a> weighed in on the <a href="http://blogs.adobe.com/fcheng/2008/07/colin_moocks_charges_against_a.html" target="_blank">actionscript buzz</a>.It was so popular that now <a href="http://www.oreillynet.com/pub/au/3426" target="_blank">Rich Tretola</a> has a <a href="http://www.insideria.com/2008/07/charges-against-actionscript-3.html" target="_blank">poll going to see which of the 9 main issues</a> the community really feels is most important to address.  Given the overwhelming response the original article got (over 70 comments!) this should be really interesting to see how the numbers play out. What are you waiting for? <a href="http://oreillynet.com/insideria/polls/index.csp" target="_blank">Go over and vote!</a>	
16	CheckPlayer updates	CheckPlayer,flensed,	CheckPlayer,flensed,	http://www.flensed.com/fresh/2008/08/checkplayer-updates/	Missing Attachment	CheckPlayer v0.6-alpha7 has now been released. It has several new helpful features, and several bug fixes.The "DoSWFCallback" parameter of DoSWF() has changed to "options". This parameter is backwards compatible so it can still be a function callback reference. But alternatively, it can now be an object that has one or more of several properties on it to take advantage of some additional features. They are:<ol><li>"swfCB" : this specifies the callback function to receive the SWF embed status events as before.</li><li>"swfTimeout" : this specifies a number of milliseconds to wait after a SWF is embedded but hasn't started downloading. If the timeout triggers, and "swfCB" is defined, it will be notified with the "SWF_TIMEOUT" event status value.</li><li>"swfEICheck" : this specifies an ExternalInterface callback function to test for on the loaded SWF. When the callback is detected and ready, the "swfCB" function will be notified with the "SWF_EI_READY" event status value.</li></ol>There were also a number of minor bug fixes implemented, including memory management improvements. All users are encouraged to upgrade.  In addition, CheckPlayer is now nearly complete in terms of testing and features and is about ready to be declared 1.0 full release ready.CheckPlayer v0.6-alpha7 is available for download here:  <a href="http://checkplayer.flensed.com/download.php">http://checkplayer.flensed.com/download.php</a>Please contact the email list (<a href="http://groups.google.com/group/flensed" target="_blank">http://groups.google.com/group/flensed</a>) or post in the forums (<a href="http://checkplayer.flensed.com/discuss.php">http://checkplayer.flensed.com/discuss.php</a>) if you have any questions or suggestions.  Now is your chance to make any suggestions for changes before CheckPlayer makes its move to 1.0 final release readiness!	
20	jQuery and flXHR… part deux	flXHR,flensed,	flXHR,jquery,	http://www.flensed.com/fresh/2008/08/jquery-and-flxhr-part-deux/	Missing Attachment	I'm really pleased to update readers that jQuery has re-visited the issue of their ajax factory method, and have decided to implement it with <a href="http://dev.jquery.com/changeset/5805" target="_blank">patch 5805</a>! This means that in an shortly upcoming release of jQuery, authors should be able to directly adapt jQuery to work with flXHR (as is possible with other frameworks!), rather than just needing to override the native object to brute-force adapt. The <a href="http://flxhr.flensed.com/demo.php">flXHR demos</a> have been updated accordingly. Thanks to <a href="http://flesler.blogspot.com/" target="_blank">Ariel Flesler</a> for the patch!	
23	Flash, AIR, Silverlight, WPF… which is which?	Flash,RIA,	flash silverlight ria,	http://www.flensed.com/fresh/2008/08/flash-air-silverlight-wpf-which-is-which/	Missing Attachment	So, it's a given -- there's been a ton of buzz about AIR vs. Silverlight lately, and then the mindful reminders from the detail-centric community members about why AIR and Silverlight are not really the same kind of technology, and so shouldn't be compared -- it should be Flash vs. Silverlight, or AIR vs. WPF, or whatever.So, is it fair to compare Flash and Silverlight as technologies -- they're both web-browser enabled plugin technologies?  Or, is it more precise to compare AIR to WPF, since both of them ground themselves in the new frontier, the user desktop?  Are all those blog posters right, should we be really making sure we don't mix technologies when we make comparisons?From a technology standpoint, yes, this is important. But maybe not from a strategic web ecosystem perspective. Maybe the AIR/Silverlight comparison (however buzzword misguided it may have initially been) is more on track that most of us have realized thus far.I'm still, and have been for a long time, more a flash fan than what microsoft has had to offer. And with the recent explosion of interest in the Silverlight community, I've been reluctant to admit that Silverlight really had all that much to offer. I've had many a conversation with my Microsoft-technology developer friends about the various reasons why Adobe or Microsoft has a better head of steam to roll in and (re)define the true RIA technology environment. Not unexpectedly, being an Adobe enthusiast, I've had a thousand and one reasons why Adobe's going to rule this space and MS will be the "never-was" second tier player.But, I had a paradigm-shifting ephiphany over the weekend. I realized that what the Flash-to-AIR evolution has in common with the WPF-to-Silverlight evolution is that it's the natural extension, although in opposite directions for each vendor, of core competency into the space that each's counterpart has ruled for so long.You see, MS has clearly ruled the desktop-application space for a long time. And they have a huge contingent of developers who are thoroughly entrenched in the ".NET ways". Those same developers live and die by the powerful Visual Studio IDE and dev tools that MS has been so good at for so long.But they've (MS devs) struggled a bit to extend themselves into the web-application world, because the browser is such a feeble "client" compared to what MS Office apps are used to leveraging for instance. There are a lot of improvements, with ASP.NET and the various open-sourced toolkits that come along with it. But you still get the sense that MS is playing catch up.So, naturally, MS has created a way for all those MS developers and apps to start cross-targeting the web space by giving the browser a facelift with new technology (via the Silverlight plugin), while still being able to deliver a strong, powerful application experience for users.  What will we see in the coming months?  I predict we'll see incredibly powerful and cool extensions of MS apps put directly inside the browser... MS Word on the Web&trade;, anyone?But then, what about Adobe?  Yeah, they've got great developer tools in the desktop environment too. But their real strength has been they've been going at the browser-on-steroids RIA environment with the Flash plugin for a long time now, and they clearly have a strong lead. And then, consider that even outside of what Adobe's done with Flash, there's a *huge* community of really incredible developers building all kinds of amazing Javascript+HTML web applications that really defy what we once thought was possible inside the chrome walls of the browser.So, along comes AIR... and here's where my naivety and paradigm-shift were blown wide open. While certainly AIR will make Flash-on-the-desktop apps a reality... I think the far bigger tour-de-force that's happening is that it will be so drop-dead easy for web applications to make the jump to persistable, offline-capable, desktop apps... truly the "next frontier" if you've been playing in the web application arena for any length of time.  So, what will we see from AIR?  We've already seen moves to make some really popular and powerful web applications available on the desktop.  So, flickr/youtube/twitter/myspace/facebook/etc/etc/etc  -- all these great web apps are probably going to head toward a desktop near you soon.And if you want to get really funky... what about applications which can leverage both Silverlight and AIR and Flash and WPF all in one?  I predict it can and will be done. The question is, who will do it.In broad, rough concepts, AIR represents Adobe's move to the desktop, and Silverlight represents MS's move to the web. They've passed the boundary that used to imaginarily separate them from each other, and have moved boldly into each other's space, and both are doing a great job of it so far. So now it appears that truly the comparisons *should* be AIR + Silverlight.What's so great about this revelation?  The point really is, both of these moves, while in opposite directions, are incredibly important for defining what the next generation of applications look like, both on the web and on the desktop. I for one am no longer hoping that Adobe beats MS (or the other way around), but that they both keep spurring each other along, and that us web dev authors continue to have more interesting and exciting choices when it comes to the technology we can leverage for our user audience.	
25	Flash for… President?	Flash,	flash video,	http://www.flensed.com/fresh/2008/08/flash-for-president/	Missing Attachment	<style>#perplayer{ display:block;position:absolute;left:0px;top:0px;}</style><script type="text/javascript" language="javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script><script language="Javascript" type="text/javascript" src="/js/viral-video.js"></script><div id="holder" style="width:384px;height:304px;position:relative;display:block;background-color:#000000;"></div><form name="nameForm"><nobr>First Name: <input name="first_name" value="Kyle" /></nobr><br /><nobr>Last Name: <input name="last_name" value="Simpson" /></nobr><br /><nobr><input type="button" value="Campaign for President!" onClick="ChangeName(this.form);" /></nobr></form>	tweetlyUpdater_bitlyUrl  => http://bit.ly/32GTB,
29	Updated: flensedCore, CheckPlayer, flXHR	CheckPlayer,Flash,flXHR,flensed,	CheckPlayer,Flash,flensed,flXHR,security,update,	http://www.flensed.com/fresh/2008/08/updated-flensedcore-checkplayer-flxhr/	Missing Attachment	A major update has been released which affects all 3 flensed projects, flensedCore, CheckPlayer, and flXHR. All users are encouraged to upgrade as soon as possible.Here's a run-down of the major things to note (more details can be found in the documentation and release-notes for each project):<ul><li>Both CheckPlayer and flXHR have been tested thoroughly on a wide spread of browsers and platforms. The pass/fail notes can be found here:  <a href="http://www.flensed.com/documentation.php">flensed Documentation</a></li><li>A new test-suite tool is available for easy testing of CheckPlayer and flXHR in various browser environments. The tool can be found here: <a href="http://www.flensed.com/code/tests/test-suite.html" target="_blank">flensed Test Suites</a></li><li>CheckPlayer now supports two new events, SWF_TIMEOUT and SWF_EI_READY. The timeout is an optional setting that times-out a non-responsive loading request of a SWF asset. The EI-ready is an optional SWF ExternalInterface callback function to check for availability/initialization on the loaded SWF (since the EI takes some time to be ready after a SWF is fully loaded). Both events tie into the DoSWF callback function feature, which allows your code to respond definitively when either of these events occur, and either load a new SWF asset or display other alternative content.</li><li>flXHR now supports the username/password parameters to the open() method call, which if non-empty, will create an 'Authorization' header and append it to the request.</li><li>flXHR now has a new feature called 'instancePooling'. Essentially, this feature is most useful when integrating flXHR with Ajax frameworks (jQuery, Dojo, etc). The feature instructs flXHR to keep references to flXHR instances around, and when new instantiation requests come in, if a suitable idle (already-used) instance is available, to re-use that by sending back its reference, instead of the time/memory penalty of creating a new instance. This should greatly improve the performance of flXHR in a multiple-request environment, especially with JS frameworks.</li><li>Both CheckPlayer and flXHR have undergone some significant polishing in terms of code clean up, proper memory management, robust asset loading, etc.</li><li>Lastly, flXHR has received a major security upgrade. Details of this security change are far too intricate for this post, and will instead be handled in a separate post and in dedicated pages. These writeups are forthcoming very shortly. The short story is that (what we deem as) a security 'hole' in Adobe Flash Player's cross-domain policy model was identified and reported to Adobe, and is pending a response from their engineers. But rather than wait for a future plugin update, flXHR's code has *temporarily* (hopefully!) been augmented with code to attempt to plug the hole in the best way possible. The change in behavior that authors will now see is that the cross-domain policies will be enforced more strictly, in that both the flXHR.swf's originating domain *and* the URL domain of the HTML page that hosts the flXHR.swf will be checked for cross-domain authorization (before, only the SWF's domain is checked).</li></ul>Please update flensedCore (to v0.2), CheckPlayer (to v0.7) and flXHR (to v0.6) as soon as possible to take advantage of the bug fixes, security updates, and new features! Join us in the forums and in our google-group mailing list for more information and answers to any questions you may have!	
31	(new) Adobe Flash Player security hole found, flXHR’s response	Flash,flXHR,	Flash,flXHR,security,update,	http://www.flensed.com/fresh/2008/08/adobe-flash-player-security-hole/	Missing Attachment	<h4>Security Hole Summary</h4>First, a brief summary of the two main "use case" conclusions of this article regarding the impact of the security hole found:1. If a page is hosting a SWF from a different domain than the page...  In this case, Adobe's model will *only* check the SWF's domain for cross-domain policy permission. Since a SWF has to be made publicly available through HTTP/S just like images do, *anyone* can link to your SWF and use it in their page... any server who your SWF can contact would probably want to allow access not just based on where the SWF is coming from, but also from the page context it's running in, but they cannot control the page-domain access. This is especially true if you as the creator of the SWF had to make the SWF more open/flexible in its capabilities for arbitrary communication (such as flXHR or other RIA communication widgets), because it's more susceptible to "abuse" by a malicious page and its javascript. 2. The more limited, niche-case is if you want to host a SWF on your server, but do not want that SWF to be able to contact your server... you *cannot* control that, because the flash player will grant "auto-trust" to the SWF to talk to *any* part of your public server's access points.  Ideally, it would seem like most server admins/authors would want to be able to publish a policy on their own server which controlled access by *any* SWF, not just any remote SWF. It seems pretty clumsy and dangerous that a host'er of a SWF cannot control that SWF's communication back to the same hosting server with a server policy... and moreover, *this* case is actually contradictory to what Adobe's own whitepaper says (bottom of page 28 of <a href="http://www.adobe.com/devnet/flashplayer/articles/flash_player_9_security.pdf" target="_blank">this PDF</a>).	
56	Well-known Flash security hole bites again	CheckPlayer,Flash,	adobe,Flash,security,	http://www.flensed.com/fresh/2008/08/well-known-flash-security-hole-bites-again/	Missing Attachment	In what should be a wake-up call to all web-dev authors who create (or use) Flash content on their sites, <a href="http://www.flashmagazine.com/" target="_blank">Jens Brynildsen of FlashMagazine</a> writes about how a <a href="http://arstechnica.com/journals/apple.ars/2008/04/11/adobe-updates-flash-player-to-fix-major-security-hole" target="_blank">well-known Flash security hole</a> was just <a href="http://www.flashmagazine.com/News/detail/flash_exploit_served_by_microsoft/" target="_blank">exploited by ads placed on the MSN (Norweigan) site</a>, quite possibly affecting/infecting tens of thousands of their users.If you haven't already, PLEASE <a href="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" target="_blank">update to the latest (9.0.124) plugin</a>, right now!  Also, help Jens' article <a href="http://digg.com/security/Flash_exploit_served_by_Microsoft" target="_blank">get some love by digg'ing it</a>, please.  We've got to get the word out!<strong>NOTE:</strong> This security bug has been known and exposed for months now, and is *not* the same as <a href="http://www.flensed.com/fresh/2008/08/adobe-flash-player-security-hole/">the new security hole</a> I found and wrote about last week.  That one, unfortunately, remains unaddressed by Adobe so far.As I mention in the first comment on that digg posting, for quite a while now, libraries like <a href="http://code.google.com/p/swfobject/" target="_blank">SWFObject</a> and our very own <a href="http://checkplayer.flensed.com/">CheckPlayer</a> have exposed Adobe's "ExpressInstall" functionality, which is a drop-dead simple way for users to be prompted to update their Flash Player plugin automatically, unobtrusively, inline in the browser whenever they visit a site with Flash content (even ads!).If web authors would realize the importance of keeping users' systems up to date and secure, and would simply use libraries and features like "ExpressInstall" to update users' plugins as they visit their site, I think there'd be much less chance that hackers and malicious folks will be able to wide-spread take advantage of such vulnerabilities.This call is *especially* true for the big, high traffic sites, who have probably the best possible chance of getting updates out to the public. If Yahoo, MSN, YouTube, Flickr, etc would use the "ExpressInstall" feature on their flash content, and specify the latest secure version (such as "9.0.124"), then millions of users would be updated very quickly, and vulnerabilities like this would die very quickly too!I also think Adobe could do a better job of getting this same call-to-action out, for the general web-dev authoring community. We all have to take responsibility in helping keep the web as safe and secure as it can be for the technologies we use to present content to users.	
62	More bug fix updates to CheckPlayer and flXHR	CheckPlayer,flXHR,flensed,	CheckPlayer,flensed,flXHR,	http://www.flensed.com/fresh/2008/09/more-bug-fix-updates-to-checkplayer-and-flxhr/	Missing Attachment	New alpha releases of <a href="http://www.flensed.com/download.php">flensedCore</a>, <a href="http://checkplayer.flensed.com/download.php">CheckPlayer</a>, and <a href="http://flxhr.flensed.com/download.php">flXHR</a>, which address a number of bugs (some big, mostly small), have officially been released. The biggest of the bugs relate to flXHR and processing of either improperly escaped text responses, or large text/binary responses -- both of which flXHR now properly handles.All users of CheckPlayer or flXHR are encouraged to upgrade immediately.[Oct 8, 2008 -- Update]: flXHR has had several other important bugs fixed since this blog post. The new current version is v0.6-alpha7.	
67	<head> Global Web Conference	RIA,	conference,Flash,head,web,	http://www.flensed.com/fresh/2008/10/head-global-web-conference/	Missing Attachment	<a href="http://www.headconference.com/"><img src="http://www.headconference.com/images/buttons/button_468x60.gif" width="468" height="60" alt="&lt;head&gt; web conference: October 24-26, 2008"/></a><strong>flensed</strong> is a micro-sponsor of this global, online, web conference called '&lt;head&gt;' (formerly 'Singularity'). I encourage all of you to attend and learn from any of the several dozen different sessions that will be held across 3 days. And you can do so from the comfort of your home or office!	
71	flensed 1.0 release candidate!	CheckPlayer,flXHR,flensed,	CheckPlayer,flensed,flXHR,	http://www.flensed.com/fresh/2008/12/flensed-10-release-candidate/	Missing Attachment	The flensedCore, CheckPlayer, and flXHR projects have all undergone significant reworkings to address various bugs and improve performance and functionality. They have been consolidated together into a 1.0 release candidate, available <a href="http://www.flensed.com/code/releases/flensed-1.0-rc1.zip">here</a>. This release is considered stable, but not production ready yet (though it's very close!). Please test it at your convenience and give any feedback you may have before we declare a full production 1.0 release.	
80	Changes and new features in flensed 1.0	CheckPlayer,flXHR,flensed,	CheckPlayer,flensed,flXHR,	http://www.flensed.com/fresh/2008/12/changes-and-new-features-in-flensed-1-0/	Missing Attachment	[UPDATE: <a href="http://www.flensed.com/fresh/2008/12/flensed-1-0-is-now-released/">flensed 1.0 was released</a> a few days ago, and is now fully tested and production ready!]The release of flensed 1.0 is very near (mere days at this point)! The rc2 release (<a href="http://www.flensed.com/code/releases/flensed-1.0-rc2.zip">ZIP</a> or <a href="http://www.flensed.com/code/releases/flensed-1.0-rc2.tar.gz">TAR.GZ</a>) has been out for several days now and being tested, and thus far seems really stable. So I thought this was a good time to discuss some of the changes that have come about over the last couple of months of me tinkering with the projects' code.<ol><li><strong>Significant code cleanup:</strong> I consolidated all 3 projects with a full 'module' pattern implementation. This means that there is very clean, tight namespace management, and variable scoping is clear (with the explicit use of 'global' parameter). Also, it allowed a very strong emphasis on the use of convenience variables for frequently referenced strings, object names, etc. This not only makes source code reading easier, it also significantly aids in the JS minification/compression (YUI Compressor).</li><li><strong>Fixes to 'visibility' and CSS management:</strong> I included an enhanced version of createCSS (from SWFObject 2.2a), which significantly improves the way that all the projects add CSS rules to the page dynamically. In addition, CheckPlayer manages 'visibility' settings of embedded SWF's in a more straightfoward way that prevents issues with ExternalInterface registration bugginess.</li><li><strong>Fixes to flXHR strict policy management:</strong> 'PolicyChecker' was the class added to flXHR.swf in a previous alpha release to address the needs discussed in this <a href="http://www.flensed.com/fresh/2008/08/adobe-flash-player-security-hole/">blog on security model holes</a>. However, it was discovered through further testing that IP addresses, single-word domains (like 'localhost'), and other such access entry-points were not being properly authorized/resolved with the implemented code logic. So, those bugs have been resolved, and the 'PolicyChecker' now properly enforces all the strict rules on SWF-domain and page-domain authorization as advertised.</li><li><strong>Increased 'open-source-ness' of the SWFs:</strong> flXHR.swf and updateplayer.swf both previously used to only be compile'able through use of the Flash IDE and the proprietary .fla source files. However, work has been done to adapt the source code for these two SWF assets so that they can be compiled using free open-source SWF compilation utilities like 'mxmlc' (Flex Builder SDK) and 'mtasc' (Motion-Twin Actionscript Compiler). This means that if authors should ever need to tinker with these assets, they can edit the .as source files and recompile them for free, no need for a .fla or the Flash IDE.This is a huge win for achieving full open-source status for the flensed projects! Going forward, all other flensed project SWF assets will endeavor to adhere to this same method. Also, the great news is that the SWF files (in general) end up either smaller or more efficient (or both!) in execution as compared to the Flash IDE compiled versions.</li><li><strong>JS assets are now compressed and highly optimized:</strong> As alluded to earlier in this post, the .js files in the flensed projects have all been run through (and tested from!) the latest YUI Compressor technology. All in all, when factoring in all assets for the entire set of flensed projects, the total optimized compressed weight (before gzip server-delivery compression) is <strong>under 47k</strong>! Of course, all fully expanded, commented source code is available with the release as well, but the Javascript assets are now fully ready for optimized production usage.</li><li><strong>Increased cooperation with major JS Frameworks:</strong> Over the last few months, I've been working on improved integration of flXHR into two major JS Frameworks, Dojo and jQuery. Dojo has come out with the 'XHR Plugins Repository' which allows multiple XHR-like transport mechanisms (like flXHR, IFRAME-proxies, dynamic-script-tags, etc) to register themselves with the framework and then calling code can automatically have the appropriate transport mechanism selected and used for it when it requests an Ajax request. jQuery has a similar feature called the "XHR Registry".The <a href="http://flxhr.flensed.com/demo.php#demo7">flXHR demos page</a> already had simple proof-of-concept ways to integrate flXHR with both these frameworks. The exciting thing that these Registry/Repository features brings to integration is officially supported and condoned adaptation, rather than end-around hacking. To that end, I've been working on getting an official "plugin" of flXHR for both Dojo and jQuery. The authors at Dojo have been communicating and working with me to get a flXHR plugin approved to be included with DojoX. I have a similar effort going with jQuery as well. The end result is that flXHR will achieve one of its primary goals -- namely, that it is easily dropped in and used with any major JS framework with little to no effort on the part of authors.</li></ol>That's it for now. There's obviously more effort going on than just this, but those are the major points to be aware of at the moment. Let us know if you have any thoughts on the direction we've gone with this release, or suggestions for future improvements or functionality.	
88	flensed 1.0 is now released!	CheckPlayer,flXHR,flensed,	CheckPlayer,flensed,flensedCore,flXHR,	http://www.flensed.com/fresh/2008/12/flensed-1-0-is-now-released/	Missing Attachment	I am excited to announce the immediate release of flensed 1.0 (the 1.0 production ready releases of <a href="http://www.flensed.com/download.php">flensedCore</a>, <a href="http://checkplayer.flensed.com/download.php">CheckPlayer</a>, and <a href="http://flxhr.flensed.com/download.php">flXHR</a>).All users are encouraged to upgrade immediately and to begin using this code for production projects.Also, check out an <a href="http://www.flensed.com/fresh/2008/12/changes-and-new-features-in-flensed-1-0/">overview of important changes/additions</a> to the flensed family of projects with this 1.0 release.	
92	flXHR-1.0.1 patch release	flXHR,flensed,	flensed,flXHR,	http://www.flensed.com/fresh/2009/01/flxhr-101-patch-release/	Missing Attachment	See <a href="http://flxhr.flensed.com/releasenotes.php">release notes</a> and <a href="http://flxhr.flensed.com/download.php">download the patch</a>.This release fixes a few bugs, but also adds the <a href="http://flxhr.flensed.com/documentation.php#nocacheheader">new 'noCacheHeader' config option</a>. See this <a href="http://flxhr.flensed.com/discuss/viewtopic.php?f=14&t=52">discussion thread</a> for more information and reasoning.Users are encouraged to upgrade to this patch release, especially because of the fix for this <a href="http://flxhr.flensed.com/discuss/viewtopic.php?f=12&t=51">race condition bug</a>.	
94	jQuery 1.3 and flXHR: a match made in heaven!	Ajax,flXHR,flensed,	ajax,cross-domain Ajax,flXHR,jquery,	http://www.flensed.com/fresh/2009/01/jquery-13-and-flxhr-a-match-made-in-heaven/	Missing Attachment	On the occasion of jQuery's third birthday, they announced today the hugely anticipated <a href="http://docs.jquery.com/Release:jQuery_1.3">1.3 release of the library</a>. Listed in the "Ajax" section is a reference to our flXHR project, and the new 'xhr' callback (transport override) they introduced, which helps flXHR work directly and efficiently as an XHR replacement with jQuery, instead of the patched/hacked hoops we went through before.  This is an important and exciting progression, not only for the flXHR project, but for XHR in general, as I hope flXHR will continue to inspire others to rally around "XHR Clones" (that is, XHR methodologies which speak the native XHR API) as a better way of solving cross-domain issues. The roadblock in jQuery of XHR override now being removed, there should be no reason why flXHR can't be joined by other efforts, giving users and authors more (and better!) options for cross-domain scripting.In accordance, I've updated the <a href="http://flxhr.flensed.com/demo.php#demo7">flXHR demo code sample for jQuery integration</a> in the demos section (see specifically <a href="http://flxhr.flensed.com/demo.php#demo7e">demo #7e</a>). It now uses the 'xhr' callback as part of the ajaxSetup(...) default options setup to register flXHR for use by jQuery. This is the current 'best practice' for how to integrate flXHR into jQuery.Moreover, the "Ajax" section in that jQuery release announcement also mentions the <a href="http://plugins.jquery.com/project/XHR">XHR Registry plugin</a> (written by <a href="http://flesler.blogspot.com/">Ariel Flesler</a>), which allows easy management of multiple XHR-like transport methods. I am working on a flXHR plugin for jQuery which plug directly into that and will leverage this new Registry. This should prove to be an even better way to integrate flXHR into your jQuery usage, while preserving the ability to use other methods alongside in the same code. For instance, you may want to use flXHR for some types of communication, and the JSON ajax native to jQuery for others, and still yet another XHR-clone for some other purpose. This registry will make that drop-dead easy.I'm hoping I'll be able to make that plugin public soon, as soon as I get some review and (hopefully!) approval on its approach. Keep an eye out for that to be released here soon.In the meantime, the great news is that flXHR and jQuery (personally one of my favorite JS libraries, and used heavily all over this site) play well in the same sandbox now, and that's just good news for us all!Congratulations to the jQuery team on their birthday and on this monumental release. Keep up the great work!	tweetlyUpdater_bitlyUrl  => http://www.flensed.com/fresh/2009/01/jquery-13-and-flxhr-a-match-made-in-heaven/,
96	flXHR jQuery plugin, patched CheckPlayer and flXHR	CheckPlayer,flXHR,flensed,	ajax,CheckPlayer,flXHR,jquery,	http://www.flensed.com/fresh/2009/03/flxhr_jquery_plugin_and_patches/	Missing Attachment	I'm excited to announce the public release of the <a href="http://plugins.jquery.com/project/flXHR">flXHRproxy jQuery plugin</a>, which registers flXHR for use with the <a href="http://plugins.jquery.com/project/XHR">jQuery XHR Registry plugin</a>. The XHR Registry Plugin, along with flXHRproxy, allows you to associate a set of flXHR options with a matched URL or partial URL for each Ajax request's target. So, you can have different data types (XML, JSON, etc) from different URL locations, each with its own set of flXHR options.All you have to do is set up the configurations on page load, and then the rest of your jQuery Ajax code is totally unchanged, as the core of jQuery and the XHR Registry will take care of doing all the matching for you automatically. It also means that it is very easy to use flXHR only for cross-domain Ajax calls and native XHR (or other methods) for other (same-domain) calls. This is a commonly asked for feature and was much harder to do before this plugin was built. flXHRproxy is now the best-practice method for integrating flXHR with jQuery.You can read more about the new plugin <a href="http://flxhr.flensed.com/jquery.php">here</a>.Also, <a href="http://flxhr.flensed.com/download.php">flXHR</a> and <a href="http://checkplayer.flensed.com/download.php">CheckPlayer</a> both have patch versions released today. All users are encouraged to upgrade to the latest releases.	tweetlyUpdater_bitlyUrl  => http://bit.ly/rjRVo,
102	flXHR and chained Ajax calls	Ajax,flXHR,flensed,	flXHR,Javascript,jquery,	http://www.flensed.com/fresh/2009/03/flxhr-and-chained-ajax-calls/	Missing Attachment	So, this is just a quick post to share some information which was worked out recently in an email thread with a flXHR user. Because it's probably a somewhat common pattern (albeit, mostly for more complex Ajax apps), I figured it would be helpful to share the information here, just in case anyone else runs up against similar issues.<a href="http://flxhr.flensed.com/documentation.php#constructor">flXHR has a feature called instancePooling</a>, which is very helpful for performance/efficiency improvement reasons, especially with pages that make multiple Ajax requests. The way it does this is to keep around instantiated references of flXHR in a "pool", and when a new instantiation is requested, if an available instance in the pool is idle and ready (that is, it's already been used and is in readyState = 4), then it will reuse that instance (and reconfigure it as necessary) instead of creating a whole new one.There was <a href="http://flxhr.flensed.com/discuss/viewtopic.php?f=12&t=58">a bug fixed in 1.0.3</a> regarding flXHR's ability to fully reconfigure a reused instance. So, if you've tried that type of thing prior to upgrading to 1.0.3, you should upgrade to get the expected behavior.Anyway, this feature is almost universally necessary when doing Ajax calls with frameworks like jQuery, Dojo, Prototype, etc, because these frameworks tend to "throw away" XHR instances after single use, but with flXHR, it's better to keep them around to avoid the "penalty" of instantiation on subsequent requests. So, rather than try to modify the way the frameworks work, flXHR makes this transparent with the opt-in "instancePooling" configuration option. I would estimate in probably 99% of all Ajax applications, this is the option you would want to keep memory-usage and instantiation times down. Unless you specifically know better, I would recommend *always* using it.Now, as the title of this post suggests, there is a common pattern for a lot of medium-to-high complexity Ajax apps where the author of a page may need to "chain" Ajax calls -- that is, make one Ajax call, and then upon completion of the first one, make another Ajax call from the response handler of the first.It is when you combine these two concepts that a devious little "issue" creeps in. I'll try not to go into lots of gory detail here, but the bottom line is, if you make an Ajax call from a response handler of a previous Ajax call, and you have instancePooling turned on, a race condition exists with the way framework code works which will cause issues, most notably that the handler may not get properly called on your second "chained" request, even though the full response does get back to the browser.Read on to find out the details and how to fix it.	tweetlyUpdater_bitlyUrl  => http://bit.ly/JgvcZ,
109	Howto: Package flXHR js files	flXHR,flensed,	flensed,flXHR,	http://www.flensed.com/fresh/2009/03/howto-package-flxhr-js-files/	Missing Attachment	Another quickie to detail a little gotcha that I just ran into on this site, actually. I use flXHR on this site to make requests to <a href="http://longurlplease.com">longurlplease</a> to lengthen/reverse shortened URLs (mostly in the recent tweets feed). I use the <a href="http://flxhr.flensed.com/jquery.php">flXHRproxy jQuery plugin</a> with jQuery code to accomplish that.I made some recent optimization changes to the site according to suggestions from <a href="http://developer.yahoo.com/yslow/">YSlow</a>. (side note: I went from a 27-F grade to a 62-D grade with some simple CSS, HTML, and JS changes -- not bad, huh?). Anyway, one of the changes I made regarding Javascript was to package all 4 flXHR related JS files into one file (flXHR.js, checkplayer.js, flensed.js, and swfobject.js), to reduce the number of HTTP requests on page load.After rolling out those changes and basking in the glory of my optimization improvements, I realized that part of my code logic, the part about reversing URLs, wasn't working anymore, even though all the rest of my jQuery code logic seemed to be working fine. After some clumsy debugging, I found out it was because flXHR was never fully loading (actually, all the JS was there, obviously, but the other assets, like flXHR.swf) were not loading.When this happens, it's USUALLY because the code is unable to auto-detect the correct base-path to load additional assets from. The code is able to do the auto-detect by looking for itself (that is, its corresponding DOM script tag) and inspecting the path of the file reference. But the logic only works if the file is the same name as what it's hard-coded to look for ("flXHR.js"). In my haste to package up the files, I named the new file "flXHR-packaged.js". Thus, the base-path detection went lame. Oops. Luckily, there's a simple fix, and doesn't require any hacking to the files at all (probably the easiest temptation -- but you should avoid that IMHO).All you have to do is include a setting to manually specify the base-path for flXHR/flensed to use, and all's good! Look:&lt;script>var flensed={base_path:"/path/to/flXHR.files/"};&lt;/script>Include that right before your script tag that includes flXHR.js (or whatever you are calling it), and you should be fine.<b>Note:</b> Make sure you use regular double-quote characters instead of the funny stylized " that WP insists on using. :)Happy flXHR'ing. :)	tweetlyUpdater_bitlyUrl  => http://bit.ly/tkwOO,
116	Stop Time Warner from their money-hungry bandwidth limiting conquests!	Misc,	bandwidth,cable,isp,monopoly,time warner,	http://www.flensed.com/fresh/2009/04/stop-timewarner-from-their-money-hungry-bandwidth-limiting-conquests/	Missing Attachment	[Update] Time Warner has <a href="http://voices.washingtonpost.com/posttech/2009/04/time_warner_stops_pay-as-use_i.html">agreed to curb their plans to cap internet usage</a>, for the time being.<blockquote>"It is clear from the public response over the last two weeks that there is a great deal of misunderstanding about our plans to roll out additional tests on consumption based billing," said Time Warner Cable chief executive Glenn Britt. "As a result, we will not proceed with implementation of additional tests until further consultation with our customers and other interested parties, ensuring that community needs are being met."</blockquote>Unfortunately, Time Warner is being a bit disingenuous, with statements like "until further consultation with our customers". In other words, they're waiting until they can find a better way to convince us that it's the best way. At least we get a "gracious" reprieve while we go back to "school" and "learn" what fair internet is all about.I also want to give a big congratulations to <a href="http://www.freepress.net/">Free Press</a>, <a href="http://www.savetheinternet.com/blog/2009/04/16/internet-users-roar-cable-giant-blinks/">Save The Internet.com</a>, and <a href="http://www.stopthecap.com/">Stop The Cap.com</a>, as well as many others, for organizing the uprising which caused Time Warner to back down. But more importantly, the thanks belongs to you, the internet user, who along with 16,000 others, sent letters to Congress in the span of few short days to express our collective outrage. Our internet is only our internet if we fight to keep it ours.<hr />Here's an excerpt from a letter I just wrote to my congressman. This represents my feelings on <a href="http://www.pcworld.com/article/162928/time_warner_changes_but_keeps_bandwidth_caps.html">Time Warner's recent announcement</a> that they will being piloting/testing a program that will <a href="http://www.businessinsider.com/time-warner-cables-metered-internet-pricing-15-150-range-2009-4">cap bandwidth usage of cable customers</a> in several metro areas, including where I live (Austin, TX). My protest is that I will be switching from their internet service, soon, if they do not recant. I will not participate in their desperate grabs at survival after years of money-hungry, poor mismanagement. They are a monopoly in all ways (except in technical legal terms), and this is what they do when they go unchecked. Watch out, America. This is only the beginning of bad things to come. Unless we stand up and fight. Contact your congressman and do the same, even if you aren't in one of the targetted areas yet. Otherwise, you will probably be next on the hit list.<blockquote>It is unbelievable to me that Time Warner (or any other provider) is being allowed to do this. Firstly, they basically have a de-facto monopoly because they are the only ones with cable lines to almost all major metropolitan areas around here (COX being the exception in some of the suburbs). Lots of other cable "providers" (like Grande, for instance) are out there, but they all lease cable bandwidth from TW or COX. This means that if TW starts doing this, when their contracts are up with those re-sellers, there's a much higher chance that those companies will have to follow suit. So the evenutal outcome is that TW is going to use their "monopoly" status to force us all into this, or to other providers.And not only is it unfair and monopolistic what they are doing, but the way in which they are doing it is sheer madness. The bandwidth caps they have chosen are so incredibly low it just simply boggles the mind. The medium cap (that is, the cap which would keep most cable bills the same for most consumers) would allow an average download usage that is *only* 2/3 the normal usage you get from having a 56k modem connected 24/7! That's right, TW is moving cable bandwidth usage back to the days of old-school modem usage! It's insanity, in the name of money hungry, and poorly managed, business.I know most of the media is focusing on the fact that this is primarily aimed at curbing internet video downloading so they can stop loosing cable/advertising dollars. But, they will affect lots of other legitimate bandwidth usage in the process. For instance, I routinely buy software, legally, over the internet, and choose to download that software to save on costs and the environment. These programs can range from the hundreds of megabytes to the couple of gigabyte range.This means that quite realistically, I could exceed a "normal" bandwidth cap after downloading only 1 or 2 legally purchased pieces of software in a month, and end up paying excessive overage fees for otherwise normal web surfing and checking email.And this doesn't even get into the fact that I do freelance side web business work from home, or telecommute to my real job from home. In both cases, I do a lot of file transferring (again, legally) of images, web code, etc. I can't even imagine having to tell my boss that I couldn't work on some emergency code fix for our software because I didn't have any bandwidth left at home. Cell phone providers somehow get away with limiting minutes, and people have those types of issues from time to time, but it'd be unheard of in this day and age for the same to be true of home internet usage.I strongly urge you to fight this and not allow TW to go down this path. We have to send a signal that the ISP's don't own the internet, and they can't act like a school bully in the lunch line and force us to "pay up" just to get in line with all the other kids.  It's been unfair and unacceptable behavior in every other area of life, we can't let this one slide or they'll walk all over us. Seriously.As for me, if it doesn't change, and soon, I'll be changing to another type of internet provider, like DSL from the phone company, to avoid and to protest such behavior. I simply will not sit by and let them take more of my hard earned money for less service.</blockquote>You should all be writing letters of a similar nature to your congressman. You should be blogging about it. You should be <a href="http://getify.tw">twitter'ing</a> about it. You should be talking about it to friends, family, and coworkers.Want to take action? Use <a href="https://secure.freepress.net/site/Advocacy?cmd=display&page=UserAction&id=311">this tool from FreePress.net to make your voice heard</a>.	tweetlyUpdater_bitlyUrl  => http://bit.ly/104xSe,
126	flXHR+Dojo=Cross Domain Ajax Fun!	Ajax,flXHR,flensed,	ajax,cross-domain Ajax,Dojo,flXHR,plugin,	http://www.flensed.com/fresh/2009/05/flxhr_dojo_cross_domain_ajax_fun/	Missing Attachment	Back in march, I <a href="http://www.flensed.com/fresh/2009/03/flxhr_jquery_plugin_and_patches/">announced</a> the <a href="http://flxhr.flensed.com/jquery.php">jQuery plugin for flXHR</a>, simply the best way to do cross-domain Ajax with jQuery. It has enjoyed huge success in traffic/downloading since, and that proves that there are lots of people out there who are doing cross-domain Ajax with frameworks like jQuery and Dojo, and that people are craving for better, easier and more flexible ways of doing so. <a href="http://flxhr.flensed.com/">flXHR</a> is the answer to your cross-domain Ajax woes.Building on the success from the jQuery plugin, I'm now pleased to announce that I've released a <a href="http://flxhr.flensed.com/dojo.php">Dojo plugin for jQuery</a> which is nearly identical in functionality. Basically, all you have to do is load the 'flXHRproxy' Dojo plugin, and then call 'registerOptions(...)' to register a URL (or partial URL) destination target and a set of flXHR options to be used for that location. Then, when you later make various Ajax calls, Dojo will internally figure out if you are calling to a location that is registered and will use flXHR (or any other transports you register!) with the options you specified.If you use Dojo, and you do cross-domain Ajax calls, I urge you to consider flXHR and flXHRproxy. Take a look at <a href="http://flxhr.flensed.com/documentation.php#dojo">flXHRproxy documentation</a> or give the <a href="http://flxhr.flensed.com/demo.php#demo7a">Dojo+flXHR demo</a> a whirl.Typical page usage might look like this:<code>dojox.io.flXHRproxy.registerOptions('http://www.mydomain.com/',{xmlResponseText:false...});dojox.io.flXHRproxy.registerOptions('http://rss.mydomain.com/',{xmlResponseText:true...});...dojo.xhrGet({url:'http://www.mydomain.com/something.html'...});...dojo.xhrGet({url:'http://rss.mydomain.com/feed.html'...});</code>This XHR registry concept is very powerful, as it allows you to have multiple different types of Ajax calls and transports and configurations for different types of data that you are mashing up in a single page. It takes all the guess work out of configuring your code to intelligently use the right communication method and options as needed for each Ajax call. It just simply could not get any easier to do cross-domain Ajax calls with Dojo now.Enjoy the new world of possibilities and fun that Dojo+flXHR now gives you for doing easy cross-domain Ajax!PS. Teaser: Coming soon, flXHR+YQL = cross-domain Ajax to literally any site on the internet! How cool is that!?	tweetlyUpdater_bitlyUrl  => http://bit.ly/DXu2j,
128	flXHR gets some Prototype love, cross-domain Ajax wins!	Ajax,flXHR,flensed,	ajax,cross-domain Ajax,flXHR,plugin,prototype,	http://www.flensed.com/fresh/2009/05/flxhr-prototype-love-cross-domain-ajax/	Missing Attachment	In the wake of the <a href="http://flxhr.flensed.com/jquery.php">jQuery flXHRproxy</a> and <a href="http://flxhr.flensed.com/dojo.php">Dojo flXHRproxy</a> plugins recently released, <a href="http://prototypejs.org">Prototype</a> was unfortunately left out of having a good solid plugin for flXHR... until now! Austin resident <a href="http://andrewdupont.net/">Prototype guru Andrew Dupont</a> recently wrote an initial version of the plugin, which I then modified and tested, and we now have a great <a href="http://flxhr.flensed.com/prototype.php">plugin for Prototype to support flXHR</a> in the same way as the other frameworks.Just like with the other framework plugin versions, you simply call 'registerOptions(...)' to register a URL (or partial URL) destination target and a set of flXHR options to be used for that location. Then, when you later make various Ajax calls, Prototype will internally figure out if you are calling to a location that is registered and will use flXHR with the options you specified.There is simply no other way to get easier cross-domain Ajax with Prototype than with flXHR and flXHRproxy. Take a look at <a href="http://flxhr.flensed.com/documentation.php#prototype">flXHRproxy documentation</a> or give the <a href="http://flxhr.flensed.com/demo.php#demo7b">Prototype+flXHR demo</a> a whirl.Typical page usage might look like this:<code>Ajax.flXHRproxy.registerOptions('http://www.mydomain.com/',{xmlResponseText:false...});Ajax.flXHRproxy.registerOptions('http://rss.mydomain.com/',{xmlResponseText:true...});...Ajax.Request('http://www.mydomain.com/something.html',{...});...Ajax.Request('http://rss.mydomain.com/feed.html',{...});</code>Enjoy the new world of possibilities and fun that Prototype and flXHRproxy now gives you for doing easy cross-domain Ajax!	tweetlyUpdater_bitlyUrl  => http://bit.ly/JWp1H,
137	Twikini – a great twitter tool for Windows Mobile	Misc,	application,mobile,twitter,windows,	http://www.flensed.com/fresh/2009/05/twikini-a-great-twitter-tool-for-windows-mobile/	Missing Attachment	Allow me to take a quick break from writing about cross-domain Ajax, flXHR, and other such geeky things. I will be brief in mentioning an application I just ran across and my suggestion you take a look at it.I recently switched phones to the <a href="http://www.samsung.com/us/consumer/detail/detail.do?group=mobilephones&type=mobilephones&subtype=att&model_cd=SGH-I627MAAATT">Samsung Propel Pro</a>. This is a big switch for me, as I've been on the Treo line of phones, with PalmOS, for a very long time (since before most of you knew what a smartphone was). Actually, I'm really just biding my time until the <a href="http://www.palm.com/us/products/phones/pre/">Palm Pre</a> is released in <a href="http://www.elite-electronix.com/palm-pre-unlocked">GSM/unlocked form</a> (non-Sprint), hopefully sometime early next year. Mobile phone vendors, if you are listening, the better future for mobile app development is in Javascript/HTML/CSS stacks, not these proprietary hinderances we've been forced to endure for so long.For now, naturally, I have to replace all my old mobile applications with ones that will work for the Windows Mobile 6.1 Standard OS that Propel Pro runs. No small task as it turns out.The real trick is that Propel Pro doesn't run "Classic" or "Professional", because it doesn't have a touchscreen. This causes many problems with a lot of WinMob apps, because they are all written assuming a touch screen, and so those apps fail for those of us unfortunate (or fortunate, depending on how you look at it!) to not have touchscreens on our smart phones.In any case, as my quest continues to find mobile apps that <b>will</b> work on my touchscreen-less phone, I finally found a twitter client that works well for me. <a href="http://www.trinketsoftware.com/Twikini">@Twikini</a>. Strange name, but a solid app none-the-less.<a href="http://www.trinketsoftware.com/Twikini/Themes.aspx"><img src="http://www.trinketsoftware.com/Images/Twikini_Theme_Windows.png" border="0" alt="Twikini screenshot" /></a>I'm particularly impressed by how usable the app is despite its "burden" of being without a touch-screen. On any tweet update, you can move the directional control left to do a "@reply" to the author, and right will give you a "RT @" retweet with the text already quoted. These two simple tasks have become so ingrained into DNA of what tweet'ing is about, it's nice to see that they didn't have to be buried in some menu option or rely on some fancy finger guesture to get at. They are quite literally at your fingertip, and I find that smart and well executed.And the best part? The app <a href="http://www.trinketsoftware.com/Twikini/Purchase.aspx">costs just $4.95</a>. What could be even better than that?  It's actually <a href="http://www.trinketsoftware.com/Twikini/purchase2.aspx">free</a>!  That's right, all you have to do is write a simple blog post, like this one, and they give it to you for free. Genius, huh!?Check out <a href="http://twitter.com/twikini">Twikini on twitter<a/> and by all means, if you have a Windows Mobile 6.1 <b>STANDARD</b> phone like I do, check out <a href="http://www.trinketsoftware.com/Twikini">the app</a> for yourself!PS. Though this app unfortunately doesn't do so (maybe they will, I can only hope!), if you are writing any kind of mobile app, you should be using <a href="http://phonegap.com">PhoneGap</a>!	tweetlyUpdater_bitlyUrl  => http://bit.ly/LNHok,
144	Some Javascript/Ajax projects: “LABjs” and “mpAjax”	Ajax,Misc,	ajax,Javascript,RIA,script,XHR,	http://www.flensed.com/fresh/2009/06/some-javascriptajax-projects-labjs-and-mpajax/	Missing Attachment	I wanted to slightly diverge from flensed project discussions for this post to talk briefly about two other projects I've recently released. The reason for talking about them here is that one or both of them may find some cooperative use or even code sharing with flXHR/flensed in the next version releases, so there is a symbiotic relationship between them.The first project is called LABjs (Loading And Blocking JavaScript). Put simply, this is a little tool (2.5k compressed) that lets you load Javascript assets dynamically, in parallel, but still allows you to define "blocking", which is to wait for one or a set of scripts to load before executing other code, such as perhaps loading more scripts.The main purpose of LABjs is to load scripts dynamically, in parallel, instead of old-school &lt;script&gt; tags which only load one at a time, and block everything else on the page. This significantly speeds up your page load. At the same time, you do sometimes still need to block and wait for some script to get loaded before doing other things. So, you get both in one simple loader API.For instance, say you're on a page that needs jQuery, but also needs a number of jQuery plugins. You need to load jQuery core itself, blocking on that download, and the ideally load all the other plugin files afterwards, in parallel, to get the page rendered and functional as quickly as possible. LABjs makes this type of functionality drop-dead simple.So, this old style of &lt;script&gt; tags:<pre><code>&lt;script src="jquery.js"&gt;&lt;/script&gt;&lt;script src="jquery.myplugin1.js"&gt;&lt;/script&gt;&lt;script src="jquery.myplugin2.js"&gt;&lt;/script&gt;&lt;script src="jquery.myplugin3.js"&gt;&lt;/script&gt;</code></pre>Becomes:<pre><code>$LAB.script("jquery.js").block().script("jquery.myplugin1.js").script("jquery.myplugin2.js").script("jquery.myplugin3.js").block(function(){    // init myplugin1, 2, and 3});</code></pre>LABjs is now in v0.7, and is demo'd and hosted on: <a href="http://labjs.com" target="_blank">http://labjs.com</a>.As I said, this type of loading logic is powerful and clean, and will probably replace the code loading logic in flensed/CheckPlayer/flXHR projects for their next releases.Joe McCann wrote a great <a href="http://www.subprint.com/blog/parallel-script-loading-with-labjs" target="_blank">blog post describing and showing off the LABjs tool</a>.Next up, I'm gonna talk about mpAjax, which allows for easy parsing of multi-part Ajax responses.	tweetlyUpdater_bitlyUrl  => http://bit.ly/hNW7K,
160	Improved event support for flXHRproxy plugins for jQuery, Dojo, Prototype, and Mootools!	Ajax,flXHR,flensed,	ajax,Dojo,events,flXHR,flXHRproxy,jquery,Mootools,prototype,	http://www.flensed.com/fresh/2009/07/improved-event-support-for-flxhrproxy-plugins-for-jquery-dojo-prototype-and-mootools/	Missing Attachment	Thanks to <a href="http://maxpert.tumblr.com/post/133630525/mootools-cross-domain-ajax-requests">Zohaib (MaXpert)</a>, flXHR now has a <a href="http://flxhr.flensed.com/mootools.php">flXHRproxy plugin for Mootools</a>! If you're using Mootools and doing cross-domain Ajax, flXHRproxy is your new best friend!Also, inspired by the code we worked out for the Mootools plugin, I have released updates to the <a href="http://flxhr.flensed.com/jquery.php">jQuery plugin</a>, <a href="http://flxhr.flensed.com/dojo.php">Dojo plugin</a>, and the <a href="http://flxhr.flensed.com/prototype.php">Prototype plugin</a>. These three plugins now play nicely with each respective framework's built in error mechanism for normal Ajax calls. Prior to this release, error handling was only possible by manually setting the "onerror" property in the flXHR instance configuration properties. This same functionality is still supported. But now the recommended approach is to specify your error callbacks directly in your Ajax/Xhr calls as you normally would. <b>Note:</b> Do only one or the other, not both, to avoid duplicate callback execution in some circumstances.Now that flXHRproxy is more tightly integrated with each framework's event mechanism, the ease with which you can make cross-domain Ajax calls just keeps getting better and better! Really, what excuse do you still have for not using flXHR for your next cross-domain Ajax call?One last note: the jQuery update also includes one additional change. The "success" callback function signature is now extended to include a third parameter, which is set to the flXHR instance (XHR) that generated the call/response. This makes it much easier to determine which specific Ajax call the response comes from.	tweetlyUpdater_bitlyUrl  => http://bit.ly/10Zd92,
167	SXSWi 2010 Voting is on! Votes needed!	Ajax,Misc,RIA,	conference,Javascript,panel,sxsw,talk,ui,	http://www.flensed.com/fresh/2009/08/sxswi-2010-voting-is-on-votes-needed/	Missing Attachment	<p><a title="Vote for 'Dude, where's my UI architecture?'" href="http://panelpicker.sxsw.com/ideas/view/4905" target="_blank"><img style="float:left;" src="http://sxsw.com/files/SXSWPanelPicker-lg.png" alt="Vote for 'Dude, where's my UI architecture?'" border="0" hspace="3" /> Go vote for "Dude, where's my UI architecture?" for SXSWi 2010!</a> That's right, your's truly is hoping to speak about improving UI architecture for the SXSWi 2010 event.<br /><br />This is a topic I'm very passionate about and I hope I can count on your support to help the talk get picked for the event. There's over 3000 submissions for only 300 spots, so every vote counts!</p><p style="clear:left;">Also, there's lots of other great technical topics to vote on. I've started <a href="http://www.linkedin.com/groupAnswers?viewQuestionAndAnswers=&gid=1913658&discussionID=6133246">a list of a few I'm stoked about on this linked-in thread</a>, so if you're feeling generous, lend some votes their way as well.</p>	tweetlyUpdater_bitlyUrl  => http://bit.ly/y9gG5,
